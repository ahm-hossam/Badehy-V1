// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registered {
  id           Int    @id @default(autoincrement())
  fullName     String
  email        String @unique
  phoneNumber  String
  countryCode  String
  countryName  String
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Relations
  trainerClients   TrainerClient[]
  packages  Package[]
}

model TrainerClient {
  id         Int      @id @default(autoincrement())
  trainerId  Int
  trainer    Registered @relation(fields: [trainerId], references: [id])
  fullName   String
  phone      String
  email      String
  gender     String?
  age        Int?
  source     String?
  notes      String?  // HTML or rich text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Relations
  subscriptions Subscription[]

  @@index([trainerId])
}

model Package {
  id         Int      @id @default(autoincrement())
  trainerId  Int
  trainer    Registered @relation(fields: [trainerId], references: [id])
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Relations
  subscriptions Subscription[]

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Subscription {
  id                Int      @id @default(autoincrement())
  trainerClientId   Int
  client            TrainerClient   @relation(fields: [trainerClientId], references: [id])
  packageId         Int
  package           Package  @relation(fields: [packageId], references: [id])
  startDate         DateTime
  durationValue     Int
  durationUnit      String   // 'days' or 'months'
  endDate           DateTime
  paymentStatus     String   // 'free', 'free trial', 'paid', 'pending', 'installments'
  paymentMethod     String?  // e.g. 'instapay', 'vodafone cash', etc.
  priceBeforeDisc   Float?
  discountApplied   Boolean? // true if discount applied
  discountType      String?  // 'fixed' or 'percentage'
  discountValue     Float?
  priceAfterDisc    Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // Relations
  installments      Installment[]

  @@index([trainerClientId])
  @@index([packageId])
}

model Installment {
  id                Int      @id @default(autoincrement())
  subscriptionId    Int
  subscription      Subscription @relation(fields: [subscriptionId], references: [id])
  paidDate          DateTime
  amount            Float
  remaining         Float
  nextInstallment   DateTime?
  status            String   // 'paid', 'pending', 'overdue'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // Relations
  transactionImages TransactionImage[]

  @@index([subscriptionId])
}

model TransactionImage {
  id            Int      @id @default(autoincrement())
  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])
  filename      String
  originalName  String
  mimeType      String
  size          Int      // File size in bytes
  imageData     Bytes    // Actual image data stored as BLOB
  uploadedAt    DateTime @default(now())
  
  @@index([installmentId])
}
