
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registered {
  id             Int             @id @default(autoincrement())
  fullName       String
  email          String          @unique
  countryCode    String
  countryName    String
  passwordHash   String
  createdAt      DateTime        @default(now())
  phoneNumber    String
  updatedAt      DateTime        @updatedAt
  packages       Package[]
  trainerClients TrainerClient[]
  labels         Label[]
  checkIns       CheckIn[]
  checkInForms   CheckInForm[]
}

model TrainerClient {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  fullName      String
  phone         String
  email         String
  gender        String?
  age           Int?
  source        String?
  level         String?
  registrationDate DateTime?
  injuriesHealthNotes String[]
  goals         String[] // New field for client goals
  // --- Added fields for full profile support ---
  goal                     String?
  workoutPlace             String?
  height                   Int?
  weight                   Int?
  preferredTrainingDays    String?
  preferredTrainingTime    String?
  equipmentAvailability    String?
  favoriteTrainingStyle    String?
  weakAreas                String?
  nutritionGoal            String?
  dietPreference           String?
  mealCount                Int?
  foodAllergies            String?
  dislikedIngredients      String?
  currentNutritionPlan     String?
  selectedFormId           Int?
  // --- End added fields ---
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  trainer       Registered     @relation(fields: [trainerId], references: [id])
  labels        Label[]        @relation("ClientLabels")
  notes         Note[]
  submissions   CheckInSubmission[]
  selectedForm  CheckInForm?   @relation("ClientSelectedForm", fields: [selectedFormId], references: [id])

  @@index([trainerId])
}

model Package {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  trainer       Registered     @relation(fields: [trainerId], references: [id])
  subscriptions Subscription[]

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Subscription {
  id              Int           @id @default(autoincrement())
  clientId        Int
  packageId       Int
  startDate       DateTime
  durationValue   Int
  durationUnit    String
  endDate         DateTime
  paymentStatus   String
  paymentMethod   String?
  priceBeforeDisc Float?
  discountApplied Boolean?
  discountType    String?
  discountValue   Float?
  priceAfterDisc  Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  installments    Installment[]
  client          TrainerClient @relation(fields: [clientId], references: [id])
  package         Package       @relation(fields: [packageId], references: [id])
  subscriptionTransactionImages SubscriptionTransactionImage[]

  @@index([clientId])
  @@index([packageId])
}

model Installment {
  id                Int                @id @default(autoincrement())
  subscriptionId    Int
  paidDate          DateTime
  amount            Float
  remaining         Float
  nextInstallment   DateTime?
  status            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subscription      Subscription       @relation(fields: [subscriptionId], references: [id])
  transactionImages TransactionImage[]

  @@index([subscriptionId])
}

model TransactionImage {
  id            Int         @id @default(autoincrement())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  imageData     Bytes
  uploadedAt    DateTime    @default(now())
  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])

  @@index([installmentId])
}

model SubscriptionTransactionImage {
  id             Int           @id @default(autoincrement())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  imageData      Bytes
  uploadedAt     DateTime      @default(now())
  subscriptionId Int
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model Label {
  id         Int            @id @default(autoincrement())
  name       String
  trainerId  Int
  trainer    Registered     @relation(fields: [trainerId], references: [id])
  clients    TrainerClient[] @relation("ClientLabels")

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Note {
  id        Int           @id @default(autoincrement())
  clientId  Int
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  client    TrainerClient @relation(fields: [clientId], references: [id])
  
  @@index([clientId])
}

model CheckIn {
  id        Int        @id @default(autoincrement())
  trainerId Int
  name      String
  createdAt DateTime   @default(now())
  trainer   Registered @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model CheckInForm {
  id          Int                @id @default(autoincrement())
  trainerId   Int
  name        String
  published   Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  trainer     Registered         @relation(fields: [trainerId], references: [id])
  questions   CheckInQuestion[]
  submissions CheckInSubmission[]
  history     CheckInFormHistory[]
  selectedByClients TrainerClient[] @relation("ClientSelectedForm")
}

model CheckInQuestion {
  id            Int          @id @default(autoincrement())
  formId        Int
  order         Int          // for sorting
  label         String
  type          String       // 'short', 'long', 'single', 'multi', 'file', 'date', 'time'
  required      Boolean
  options       Json?        // for single/multi choice
  conditionGroup Json?       // for conditional logic (array of conditions)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  form          CheckInForm  @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([order])
}

model CheckInSubmission {
  id         Int           @id @default(autoincrement())
  formId     Int
  clientId   Int?
  submittedAt DateTime     @default(now())
  answers    Json          // stores all answers as JSON
  form       CheckInForm   @relation(fields: [formId], references: [id])
  client     TrainerClient? @relation(fields: [clientId], references: [id])

  @@index([formId])
  @@index([clientId])
}

model CheckInFormHistory {
  id         Int           @id @default(autoincrement())
  formId     Int
  version    Int
  name       String
  questions  Json          // snapshot of questions/logic at this version
  createdAt  DateTime      @default(now())
  form       CheckInForm   @relation(fields: [formId], references: [id])

  @@index([formId])
  @@unique([formId, version])
}