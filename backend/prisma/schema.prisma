generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registered {
  id                         Int                         @id @default(autoincrement())
  fullName                   String
  email                      String                      @unique
  countryCode                String
  countryName                String
  passwordHash               String
  createdAt                  DateTime                    @default(now())
  phoneNumber                String
  updatedAt                  DateTime                    @updatedAt
  accountStatus              String                      @default("pending")
  subscriptionStatus         String                      @default("active")
  brandingSettings           BrandingSettings?
  checkIns                   CheckIn[]
  checkInForms               CheckInForm[]
  clientNutritionAssignments ClientNutritionAssignment[]
  clientProgramAssignments   ClientProgramAssignment[]
  clientServices             ClientService[]
  clientAssignments          ClientTeamAssignment[]
  exercises                  Exercise[]
  financialRecords           FinancialRecord[]
  labels                     Label[]
  leads                      Lead[]
  nutritionPrograms          NutritionProgram[]
  pdfTemplates               PDFTemplate[]
  packages                   Package[]
  programs                   Program[]
  services                   Service[]
  supportRequests            SupportRequest[]
  tasks                      Task[]
  teamMembers                TeamMember[]
  trainerClients             TrainerClient[]
}

model TrainerClient {
  id                    Int                         @id @default(autoincrement())
  trainerId             Int
  fullName              String
  phone                 String
  email                 String
  gender                String?
  age                   Int?
  source                String?
  level                 String?
  registrationDate      DateTime?
  injuriesHealthNotes   String[]
  goals                 String[]
  goal                  String?
  workoutPlace          String?
  height                Int?
  weight                Int?
  preferredTrainingDays String?
  preferredTrainingTime String?
  equipmentAvailability String?
  favoriteTrainingStyle String?
  weakAreas             String?
  nutritionGoal         String?
  dietPreference        String?
  mealCount             Int?
  foodAllergies         String?
  dislikedIngredients   String?
  currentNutritionPlan  String?
  selectedFormId        Int?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  originLeadId          Int?                        @unique
  submissions           CheckInSubmission[]
  nutritionAssignments  ClientNutritionAssignment[]
  programAssignments    ClientProgramAssignment[]
  services              ClientService[]
  teamAssignments       ClientTeamAssignment[]
  financialRecords      FinancialRecord[]
  notes                 Note[]
  subscriptions         Subscription[]
  tasks                 Task[]
  originLead            Lead?                       @relation("LeadToClient", fields: [originLeadId], references: [id])
  selectedForm          CheckInForm?                @relation("ClientSelectedForm", fields: [selectedFormId], references: [id])
  trainer               Registered                  @relation(fields: [trainerId], references: [id])
  labels                Label[]                     @relation("ClientLabels")
  // Back relation for ClientAuth one-to-one credentials
  clientAuth            ClientAuth?

  @@index([trainerId])
}

model Package {
  id              Int            @id @default(autoincrement())
  trainerId       Int
  name            String
  durationValue   Int            @default(1)
  durationUnit    String         @default("month")
  priceBeforeDisc Float          @default(0)
  discountApplied Boolean        @default(false)
  discountType    String?
  discountValue   Float?
  priceAfterDisc  Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  trainer         Registered     @relation(fields: [trainerId], references: [id])
  subscriptions   Subscription[]

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Subscription {
  id                            Int                            @id @default(autoincrement())
  clientId                      Int
  packageId                     Int
  startDate                     DateTime
  durationValue                 Int
  durationUnit                  String
  endDate                       DateTime
  paymentStatus                 String
  paymentMethod                 String?
  priceBeforeDisc               Float?
  discountApplied               Boolean?
  discountType                  String?
  discountValue                 Float?
  priceAfterDisc                Float?
  isOnHold                      Boolean                        @default(false)
  holdStartDate                 DateTime?
  holdEndDate                   DateTime?
  holdDuration                  Int?
  holdDurationUnit              String?
  isCanceled                    Boolean                        @default(false)
  canceledAt                    DateTime?
  cancelReason                  String?
  refundAmount                  Decimal?                       @db.Decimal(10, 2)
  refundType                    String?
  renewalHistory                Json?
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  installments                  Installment[]
  client                        TrainerClient                  @relation(fields: [clientId], references: [id])
  package                       Package                        @relation(fields: [packageId], references: [id])
  holdHistory                   SubscriptionHold[]
  subscriptionTransactionImages SubscriptionTransactionImage[]

  @@index([clientId])
  @@index([packageId])
}

model Installment {
  id                Int                @id @default(autoincrement())
  subscriptionId    Int
  paidDate          DateTime
  amount            Float
  remaining         Float
  nextInstallment   DateTime?
  status            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subscription      Subscription       @relation(fields: [subscriptionId], references: [id])
  transactionImages TransactionImage[]

  @@index([subscriptionId])
}

model TransactionImage {
  id            Int         @id @default(autoincrement())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  imageData     Bytes
  uploadedAt    DateTime    @default(now())
  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])

  @@index([installmentId])
}

model SubscriptionTransactionImage {
  id             Int          @id @default(autoincrement())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  imageData      Bytes
  uploadedAt     DateTime     @default(now())
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model SubscriptionHold {
  id               Int          @id @default(autoincrement())
  subscriptionId   Int
  holdStartDate    DateTime
  holdEndDate      DateTime
  holdDuration     Int
  holdDurationUnit String
  reason           String?
  createdAt        DateTime     @default(now())
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model Service {
  id          Int             @id @default(autoincrement())
  trainerId   Int
  name        String
  description String?
  priceEGP    Decimal         @db.Decimal(10, 2)
  status      String          @default("active")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  assignments ClientService[]
  trainer     Registered      @relation(fields: [trainerId], references: [id])

  @@index([trainerId, status])
  @@index([trainerId, name])
}

model ClientService {
  id            Int           @id @default(autoincrement())
  trainerId     Int
  clientId      Int
  serviceId     Int
  serviceName   String
  priceEGP      Decimal       @db.Decimal(10, 2)
  assignedAt    DateTime      @default(now())
  startDate     DateTime?
  endDate       DateTime?
  notes         String?
  isActive      Boolean       @default(true)
  unassignedAt  DateTime?
  paymentStatus String        @default("pending")
  paymentMethod String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  client        TrainerClient @relation(fields: [clientId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])
  trainer       Registered    @relation(fields: [trainerId], references: [id])

  @@unique([clientId, serviceId, isActive])
  @@index([trainerId, clientId, isActive, paymentStatus])
  @@index([serviceId, isActive])
}

model Lead {
  id                Int            @id @default(autoincrement())
  trainerId         Int
  fullName          String
  phone             String?
  email             String?
  source            String?
  campaign          String?
  stage             String         @default("New")
  ownerId           Int?
  score             Int?
  lastContactAt     DateTime?
  nextFollowUpAt    DateTime?
  notes             String?
  convertedClientId Int?           @unique
  isArchived        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  owner             TeamMember?    @relation(fields: [ownerId], references: [id])
  trainer           Registered     @relation(fields: [trainerId], references: [id])
  activities        LeadActivity[]
  tasks             Task[]
  convertedClient   TrainerClient? @relation("LeadToClient")

  @@index([trainerId, stage, isArchived])
}

model LeadActivity {
  id             Int         @id @default(autoincrement())
  leadId         Int
  type           String
  content        String?
  byTeamMemberId Int?
  createdAt      DateTime    @default(now())
  byTeamMember   TeamMember? @relation(fields: [byTeamMemberId], references: [id])
  lead           Lead        @relation(fields: [leadId], references: [id])

  @@index([leadId])
}

model Label {
  id        Int             @id @default(autoincrement())
  name      String
  trainerId Int
  trainer   Registered      @relation(fields: [trainerId], references: [id])
  clients   TrainerClient[] @relation("ClientLabels")

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Note {
  id        Int           @id @default(autoincrement())
  clientId  Int
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  client    TrainerClient @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

model CheckIn {
  id        Int        @id @default(autoincrement())
  trainerId Int
  name      String
  createdAt DateTime   @default(now())
  trainer   Registered @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model CheckInForm {
  id                Int                  @id @default(autoincrement())
  trainerId         Int
  name              String
  published         Boolean              @default(false)
  isMainForm        Boolean              @default(false)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  trainer           Registered           @relation(fields: [trainerId], references: [id])
  history           CheckInFormHistory[]
  questions         CheckInQuestion[]
  submissions       CheckInSubmission[]
  selectedByClients TrainerClient[]      @relation("ClientSelectedForm")
}

model CheckInQuestion {
  id             Int         @id @default(autoincrement())
  formId         Int
  order          Int
  label          String
  type           String
  required       Boolean
  options        Json?
  conditionGroup Json?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  form           CheckInForm @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([order])
}

model CheckInSubmission {
  id          Int            @id @default(autoincrement())
  formId      Int
  clientId    Int?
  phoneNumber String?
  submittedAt DateTime       @default(now())
  answers     Json
  client      TrainerClient? @relation(fields: [clientId], references: [id])
  form        CheckInForm    @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([clientId])
  @@index([phoneNumber])
}

model CheckInFormHistory {
  id        Int         @id @default(autoincrement())
  formId    Int
  version   Int
  data      Json
  createdAt DateTime    @default(now())
  form      CheckInForm @relation(fields: [formId], references: [id])

  @@index([formId])
}

model Exercise {
  id               Int               @id @default(autoincrement())
  trainerId        Int
  name             String
  videoUrl         String?
  description      String?
  category         String?
  bodyPart         String?
  equipment        String?
  target           String?
  secondaryMuscles String[]          @default([])
  instructions     String[]          @default([])
  gifUrl           String?
  source           String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  trainer          Registered        @relation(fields: [trainerId], references: [id])
  programExercises ProgramExercise[]

  @@index([trainerId])
}

model Program {
  id                Int                       @id @default(autoincrement())
  trainerId         Int
  name              String
  description       String?
  template          String?
  branding          Json?
  pdfUrl            String?
  isImported        Boolean                   @default(false)
  importedPdfUrl    String?
  programDuration   Int?
  durationUnit      String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  clientAssignments ClientProgramAssignment[]
  trainer           Registered                @relation(fields: [trainerId], references: [id])
  weeks             ProgramWeek[]

  @@index([trainerId])
}

model NutritionProgram {
  id                Int                         @id @default(autoincrement())
  trainerId         Int
  name              String
  description       String?
  template          String?
  branding          Json?
  pdfUrl            String?
  isImported        Boolean                     @default(false)
  importedPdfUrl    String?
  programDuration   Int?
  durationUnit      String?
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  clientAssignments ClientNutritionAssignment[]
  trainer           Registered                  @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model ProgramWeek {
  id         Int          @id @default(autoincrement())
  programId  Int
  weekNumber Int
  name       String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  days       ProgramDay[]
  program    Program      @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
}

model ProgramDay {
  id        Int               @id @default(autoincrement())
  weekId    Int
  dayNumber Int
  name      String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  week      ProgramWeek       @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises ProgramExercise[]

  @@index([weekId])
}

model ProgramExercise {
  id         Int        @id @default(autoincrement())
  dayId      Int
  exerciseId Int
  order      Int
  sets       Int?
  reps       Int?
  weight     Float?
  duration   Int?
  restTime   Int?
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  day        ProgramDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  exercise   Exercise   @relation(fields: [exerciseId], references: [id])

  @@index([dayId])
  @@index([exerciseId])
}

model BrandingSettings {
  id           Int        @id @default(autoincrement())
  trainerId    Int        @unique
  companyName  String
  logoUrl      String?
  contactEmail String
  contactPhone String
  website      String?
  address      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  trainer      Registered @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId])
}

model PDFTemplate {
  id          Int               @id @default(autoincrement())
  trainerId   Int
  name        String
  description String?
  fileUrl     String?
  category    String            @default("general")
  isActive    Boolean           @default(true)
  uploadType  String            @default("complete")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  trainer     Registered        @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  pages       PDFTemplatePage[]

  @@index([trainerId])
}

model PDFTemplatePage {
  id         Int         @id @default(autoincrement())
  templateId Int
  pageName   String
  pageOrder  Int
  fileUrl    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  template   PDFTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([pageOrder])
}

model SupportRequest {
  id        Int        @id @default(autoincrement())
  trainerId Int
  subject   String
  message   String
  status    String     @default("pending")
  priority  String     @default("medium")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  trainer   Registered @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model FinancialRecord {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  type          String
  source        String
  category      String?
  clientId      Int?
  date          DateTime
  amount        Decimal        @db.Decimal(12, 2)
  paymentMethod String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  client        TrainerClient? @relation(fields: [clientId], references: [id])
  trainer       Registered     @relation(fields: [trainerId], references: [id])

  @@index([trainerId, date, type])
  @@index([trainerId, type])
}

model TeamMember {
  id                Int                    @id @default(autoincrement())
  trainerId         Int
  fullName          String
  email             String                 @unique
  phone             String?
  role              String
  password          String
  status            String                 @default("active")
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  clientAssignments ClientTeamAssignment[]
  leadsOwned        Lead[]
  leadActivities    LeadActivity[]
  assignedTasks     Task[]
  taskComments      TaskComment[]
  trainer           Registered             @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model ClientTeamAssignment {
  id           Int           @id @default(autoincrement())
  trainerId    Int
  clientId     Int
  teamMemberId Int
  assignedAt   DateTime      @default(now())
  client       TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  teamMember   TeamMember    @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  trainer      Registered    @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@unique([clientId, teamMemberId])
  @@index([trainerId])
  @@index([clientId])
  @@index([teamMemberId])
}

model ClientProgramAssignment {
  id             Int           @id @default(autoincrement())
  trainerId      Int
  clientId       Int
  programId      Int
  assignedAt     DateTime      @default(now())
  startDate      DateTime
  endDate        DateTime?
  nextUpdateDate DateTime?
  isActive       Boolean       @default(true)
  status         String        @default("active")
  notes          String?
  client         TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  program        Program       @relation(fields: [programId], references: [id], onDelete: Cascade)
  trainer        Registered    @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([clientId])
  @@index([programId])
}

model ClientNutritionAssignment {
  id                 Int              @id @default(autoincrement())
  trainerId          Int
  clientId           Int
  nutritionProgramId Int
  assignedAt         DateTime         @default(now())
  startDate          DateTime
  endDate            DateTime?
  nextUpdateDate     DateTime?
  isActive           Boolean          @default(true)
  status             String           @default("active")
  notes              String?
  client             TrainerClient    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  nutritionProgram   NutritionProgram @relation(fields: [nutritionProgramId], references: [id], onDelete: Cascade)
  trainer            Registered       @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([clientId])
  @@index([nutritionProgramId])
}

model Task {
  id                 Int            @id @default(autoincrement())
  trainerId          Int
  title              String
  description        String?
  taskType           String
  category           String
  status             String         @default("open")
  assignedTo         Int?
  dueDate            DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  clientId           Int?
  leadId             Int?
  assignedTeamMember TeamMember?    @relation(fields: [assignedTo], references: [id])
  client             TrainerClient? @relation(fields: [clientId], references: [id])
  lead               Lead?          @relation(fields: [leadId], references: [id])
  trainer            Registered     @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  comments           TaskComment[]

  @@index([trainerId])
  @@index([assignedTo])
  @@index([clientId])
  @@index([leadId])
  @@index([status])
  @@index([taskType])
  @@index([category])
}

model TaskComment {
  id           Int        @id @default(autoincrement())
  taskId       Int
  teamMemberId Int
  comment      String
  createdAt    DateTime   @default(now())
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])

  @@index([taskId])
  @@index([teamMemberId])
}

model ManuallyDeletedTask {
  id             Int      @id @default(autoincrement())
  trainerId      Int
  clientId       Int?
  category       String
  taskType       String
  originalTaskId Int
  deletedAt      DateTime @default(now())

  @@index([trainerId])
  @@index([clientId])
  @@index([trainerId, clientId, category, taskType])
}

// Authentication credentials for mobile clients (trainees)
model ClientAuth {
  id           Int            @id @default(autoincrement())
  clientId     Int            @unique
  email        String?        @unique
  phone        String?        @unique
  passwordHash String
  requiresPasswordReset Boolean @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  client       TrainerClient  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([phone])
}
