generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registered {
  id                         Int                         @id @default(autoincrement())
  fullName                   String
  email                      String                      @unique
  countryCode                String
  countryName                String
  passwordHash               String
  createdAt                  DateTime                    @default(now())
  phoneNumber                String
  updatedAt                  DateTime                    @updatedAt
  accountStatus              String                      @default("pending")
  subscriptionStatus         String                      @default("active")
  checkIns                   CheckIn[]
  checkInForms               CheckInForm[]
  clientNutritionAssignments ClientNutritionAssignment[]
  clientProgramAssignments   ClientProgramAssignment[]
  clientServices             ClientService[]
  clientAssignments          ClientTeamAssignment[]
  exercises                  Exercise[]
  financialRecords           FinancialRecord[]
  ingredients                Ingredient[]
  labels                     Label[]
  leads                      Lead[]
  meals                      Meal[]
  messages                   Message[]
  notifications              Notification[]
  nutritionPrograms          NutritionProgram[]
  packages                   Package[]
  programs                   Program[]
  services                   Service[]
  supportRequests            SupportRequest[]
  tasks                      Task[]
  teamMembers                TeamMember[]
  trainerClients             TrainerClient[]
  workflows                  Workflow[]
}

model TrainerClient {
  id                          Int                         @id @default(autoincrement())
  trainerId                   Int
  fullName                    String
  phone                       String
  email                       String
  gender                      String?
  age                         Int?
  source                      String?
  level                       String?
  registrationDate            DateTime?
  injuriesHealthNotes         String?
  goals                       String?
  goal                        String?
  workoutPlace                String?
  height                      Int?
  weight                      Int?
  preferredTrainingDays       String?
  preferredTrainingTime       String?
  equipmentAvailability       String?
  favoriteTrainingStyle       String?
  weakAreas                   String?
  nutritionGoal               String?
  dietPreference              String?
  mealCount                   Int?
  foodAllergies               String?
  dislikedIngredients         String?
  currentNutritionPlan        String?
  selectedFormId              Int?
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  originLeadId                Int?                        @unique
  assignedForms               AssignedForm[]
  submissions                 CheckInSubmission[]
  clientAuth                  ClientAuth?
  nutritionAssignments        ClientNutritionAssignment[]
  programAssignments          ClientProgramAssignment[]
  services                    ClientService[]
  teamAssignments             ClientTeamAssignment[]
  financialRecords            FinancialRecord[]
  messages                    Message[]                   @relation("ClientMessages")
  notes                       Note[]
  notificationRecipients      NotificationRecipient[]
  customizedNutritionPrograms NutritionProgram[]          @relation("CustomizedNutritionProgram")
  customizedPrograms          Program[]                   @relation("CustomizedProgram")
  pushToken                   PushToken?
  subscriptions               Subscription[]
  tasks                       Task[]
  originLead                  Lead?                       @relation("LeadToClient", fields: [originLeadId], references: [id])
  selectedForm                CheckInForm?                @relation("ClientSelectedForm", fields: [selectedFormId], references: [id])
  trainer                     Registered                  @relation(fields: [trainerId], references: [id])
  workflowExecutions          WorkflowExecution[]
  workoutSessions             WorkoutSession[]
  labels                      Label[]                     @relation("ClientLabels")

  @@index([trainerId])
}

model Package {
  id              Int            @id @default(autoincrement())
  trainerId       Int
  name            String
  durationValue   Int            @default(1)
  durationUnit    String         @default("month")
  priceBeforeDisc Float          @default(0)
  discountApplied Boolean        @default(false)
  discountType    String?
  discountValue   Float?
  priceAfterDisc  Float?
  followUpDays    Int?
  followUpFormId  Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  trainer         Registered     @relation(fields: [trainerId], references: [id])
  subscriptions   Subscription[]
  workflows       Workflow[]

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Subscription {
  id                            Int                            @id @default(autoincrement())
  clientId                      Int
  packageId                     Int
  startDate                     DateTime
  durationValue                 Int
  durationUnit                  String
  endDate                       DateTime
  paymentStatus                 String
  paymentMethod                 String?
  priceBeforeDisc               Float?
  discountApplied               Boolean?
  discountType                  String?
  discountValue                 Float?
  priceAfterDisc                Float?
  isOnHold                      Boolean                        @default(false)
  holdStartDate                 DateTime?
  holdEndDate                   DateTime?
  holdDuration                  Int?
  holdDurationUnit              String?
  isCanceled                    Boolean                        @default(false)
  canceledAt                    DateTime?
  cancelReason                  String?
  refundAmount                  Float?
  refundType                    String?
  renewalHistory                Json?
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  installments                  Installment[]
  client                        TrainerClient                  @relation(fields: [clientId], references: [id])
  package                       Package                        @relation(fields: [packageId], references: [id])
  holdHistory                   SubscriptionHold[]
  subscriptionTransactionImages SubscriptionTransactionImage[]

  @@index([clientId])
  @@index([packageId])
}

model Installment {
  id                Int                @id @default(autoincrement())
  subscriptionId    Int
  paidDate          DateTime
  amount            Float
  remaining         Float
  nextInstallment   DateTime?
  status            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subscription      Subscription       @relation(fields: [subscriptionId], references: [id])
  transactionImages TransactionImage[]

  @@index([subscriptionId])
}

model TransactionImage {
  id            Int         @id @default(autoincrement())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  imageData     Bytes
  uploadedAt    DateTime    @default(now())
  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])

  @@index([installmentId])
}

model SubscriptionTransactionImage {
  id             Int          @id @default(autoincrement())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  imageData      Bytes
  uploadedAt     DateTime     @default(now())
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model SubscriptionHold {
  id               Int          @id @default(autoincrement())
  subscriptionId   Int
  holdStartDate    DateTime
  holdEndDate      DateTime
  holdDuration     Int
  holdDurationUnit String
  reason           String?
  createdAt        DateTime     @default(now())
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model Service {
  id          Int             @id @default(autoincrement())
  trainerId   Int
  name        String
  description String?
  priceEGP    Float
  status      String          @default("active")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  assignments ClientService[]
  trainer     Registered      @relation(fields: [trainerId], references: [id])

  @@index([trainerId, status])
  @@index([trainerId, name])
}

model ClientService {
  id            Int           @id @default(autoincrement())
  trainerId     Int
  clientId      Int
  serviceId     Int
  serviceName   String
  priceEGP      Float
  assignedAt    DateTime      @default(now())
  startDate     DateTime?
  endDate       DateTime?
  notes         String?
  isActive      Boolean       @default(true)
  unassignedAt  DateTime?
  paymentStatus String        @default("pending")
  paymentMethod String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  client        TrainerClient @relation(fields: [clientId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])
  trainer       Registered    @relation(fields: [trainerId], references: [id])

  @@unique([clientId, serviceId, isActive])
  @@index([trainerId, clientId, isActive, paymentStatus])
  @@index([serviceId, isActive])
}

model Lead {
  id                Int            @id @default(autoincrement())
  trainerId         Int
  fullName          String
  phone             String?
  email             String?
  source            String?
  campaign          String?
  stage             String         @default("New")
  ownerId           Int?
  score             Int?
  lastContactAt     DateTime?
  nextFollowUpAt    DateTime?
  notes             String?
  convertedClientId Int?           @unique
  isArchived        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  owner             TeamMember?    @relation(fields: [ownerId], references: [id])
  trainer           Registered     @relation(fields: [trainerId], references: [id])
  activities        LeadActivity[]
  tasks             Task[]
  convertedClient   TrainerClient? @relation("LeadToClient")

  @@index([trainerId, stage, isArchived])
}

model LeadActivity {
  id             Int         @id @default(autoincrement())
  leadId         Int
  type           String
  content        String?
  byTeamMemberId Int?
  createdAt      DateTime    @default(now())
  byTeamMember   TeamMember? @relation(fields: [byTeamMemberId], references: [id])
  lead           Lead        @relation(fields: [leadId], references: [id])

  @@index([leadId])
}

model Label {
  id        Int             @id @default(autoincrement())
  name      String
  trainerId Int
  trainer   Registered      @relation(fields: [trainerId], references: [id])
  clients   TrainerClient[] @relation("ClientLabels")

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Note {
  id        Int           @id @default(autoincrement())
  clientId  Int
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  client    TrainerClient @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

model CheckIn {
  id        Int        @id @default(autoincrement())
  trainerId Int
  name      String
  createdAt DateTime   @default(now())
  trainer   Registered @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model CheckInForm {
  id                Int                  @id @default(autoincrement())
  trainerId         Int
  name              String
  published         Boolean              @default(false)
  isMainForm        Boolean              @default(false)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  assignedForms     AssignedForm[]
  trainer           Registered           @relation(fields: [trainerId], references: [id])
  history           CheckInFormHistory[]
  questions         CheckInQuestion[]
  submissions       CheckInSubmission[]
  selectedByClients TrainerClient[]      @relation("ClientSelectedForm")
}

model CheckInQuestion {
  id             Int         @id @default(autoincrement())
  formId         Int
  order          Int
  label          String
  type           String
  required       Boolean
  options        Json?
  conditionGroup Json?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  form           CheckInForm @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([order])
}

model CheckInSubmission {
  id          Int            @id @default(autoincrement())
  formId      Int
  clientId    Int?
  phoneNumber String?
  submittedAt DateTime       @default(now())
  answers     Json
  client      TrainerClient? @relation(fields: [clientId], references: [id])
  form        CheckInForm    @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([clientId])
  @@index([phoneNumber])
}

model CheckInFormHistory {
  id        Int         @id @default(autoincrement())
  formId    Int
  version   Int
  data      Json
  createdAt DateTime    @default(now())
  form      CheckInForm @relation(fields: [formId], references: [id])

  @@index([formId])
}

model Exercise {
  id               Int               @id @default(autoincrement())
  trainerId        Int
  name             String
  videoUrl         String?
  description      String?
  category         String?
  bodyPart         String?
  equipment        String?
  target           String?
  secondaryMuscles String?           @default("[]")
  instructions     String?           @default("[]")
  gifUrl           String?
  source           String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  trainer          Registered        @relation(fields: [trainerId], references: [id])
  programExercises ProgramExercise[]

  @@index([trainerId])
}

model Ingredient {
  id              Int              @id @default(autoincrement())
  trainerId       Int
  name            String
  category        String
  description     String?
  cookingState    String           @default("before_cook")
  caloriesBefore  Float            @default(0)
  proteinBefore   Float            @default(0)
  carbsBefore     Float            @default(0)
  fatsBefore      Float            @default(0)
  caloriesAfter   Float            @default(0)
  proteinAfter    Float            @default(0)
  carbsAfter      Float            @default(0)
  fatsAfter       Float            @default(0)
  fiber           Float            @default(0)
  sugar           Float            @default(0)
  sodium          Float            @default(0)
  unitType        String           @default("grams")
  servingSize     Float            @default(100)
  costPerUnit     Float?
  allergens       String?          @default("[]")
  imageUrl        String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  trainer         Registered       @relation(fields: [trainerId], references: [id])
  mealIngredients MealIngredient[]

  @@index([trainerId])
  @@index([category])
  @@index([name])
}

model Program {
  id                    Int                       @id @default(autoincrement())
  trainerId             Int
  name                  String
  description           String?
  pdfUrl                String?
  isImported            Boolean                   @default(false)
  isDefault             Boolean                   @default(false)
  importedPdfUrl        String?
  programDuration       Int?
  durationUnit          String?
  originalProgramId     Int?
  customizedForClientId Int?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  clientAssignments     ClientProgramAssignment[]
  customizedFor         TrainerClient?            @relation("CustomizedProgram", fields: [customizedForClientId], references: [id])
  trainer               Registered                @relation(fields: [trainerId], references: [id])
  weeks                 ProgramWeek[]

  @@index([trainerId])
  @@index([originalProgramId])
  @@index([customizedForClientId])
}

model NutritionProgram {
  id                         Int                         @id @default(autoincrement())
  trainerId                  Int
  name                       String
  description                String?
  pdfUrl                     String?
  isImported                 Boolean                     @default(false)
  importedPdfUrl             String?
  programDuration            Int?
  durationUnit               String?                     @default("weeks")
  repeatCount                Int?                        @default(1)
  targetCalories             Float?
  targetProtein              Float?
  targetCarbs                Float?
  targetFats                 Float?
  proteinPercentage          Float?
  carbsPercentage            Float?
  fatsPercentage             Float?
  usePercentages             Boolean                     @default(false)
  isActive                   Boolean                     @default(true)
  originalNutritionProgramId Int?
  customizedForClientId      Int?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  clientAssignments          ClientNutritionAssignment[]
  customizedFor              TrainerClient?              @relation("CustomizedNutritionProgram", fields: [customizedForClientId], references: [id])
  trainer                    Registered                  @relation(fields: [trainerId], references: [id])
  meals                      NutritionProgramMeal[]
  weeks                      NutritionProgramWeek[]

  @@index([trainerId])
  @@index([originalNutritionProgramId])
  @@index([customizedForClientId])
}

model Meal {
  id                Int                    @id @default(autoincrement())
  trainerId         Int
  name              String
  description       String?
  category          String
  prepTime          Int?
  cookTime          Int?
  servings          Int                    @default(1)
  difficulty        String?
  instructions      String?
  imageUrl          String?
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  totalCalories     Float                  @default(0)
  totalProtein      Float                  @default(0)
  totalCarbs        Float                  @default(0)
  totalFats         Float                  @default(0)
  totalFiber        Float                  @default(0)
  totalSugar        Float                  @default(0)
  totalSodium       Float                  @default(0)
  trainer           Registered             @relation(fields: [trainerId], references: [id])
  mealIngredients   MealIngredient[]
  nutritionPrograms NutritionProgramMeal[]

  @@index([trainerId])
  @@index([category])
  @@index([name])
}

model MealIngredient {
  id           Int        @id @default(autoincrement())
  mealId       Int
  ingredientId Int
  quantity     Float
  unit         String
  notes        String?
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  meal         Meal       @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@unique([mealId, ingredientId])
  @@index([mealId])
  @@index([ingredientId])
}

model NutritionProgramWeek {
  id                 Int                    @id @default(autoincrement())
  nutritionProgramId Int
  weekNumber         Int
  name               String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  days               NutritionProgramDay[]
  meals              NutritionProgramMeal[]
  nutritionProgram   NutritionProgram       @relation(fields: [nutritionProgramId], references: [id], onDelete: Cascade)

  @@unique([nutritionProgramId, weekNumber])
  @@index([nutritionProgramId])
}

model NutritionProgramDay {
  id                     Int                    @id @default(autoincrement())
  nutritionProgramWeekId Int
  dayOfWeek              Int
  name                   String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  nutritionProgramWeek   NutritionProgramWeek   @relation(fields: [nutritionProgramWeekId], references: [id], onDelete: Cascade)
  meals                  NutritionProgramMeal[]

  @@unique([nutritionProgramWeekId, dayOfWeek])
  @@index([nutritionProgramWeekId])
}

model NutritionProgramMeal {
  id                     Int                   @id @default(autoincrement())
  nutritionProgramId     Int
  nutritionProgramWeekId Int?
  nutritionProgramDayId  Int?
  mealId                 Int?
  mealType               String
  order                  Int?
  isCheatMeal            Boolean               @default(false)
  cheatDescription       String?
  cheatImageUrl          String?
  customQuantity         Float?
  customNotes            String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  meal                   Meal?                 @relation(fields: [mealId], references: [id], onDelete: Cascade)
  nutritionProgramDay    NutritionProgramDay?  @relation(fields: [nutritionProgramDayId], references: [id], onDelete: Cascade)
  nutritionProgram       NutritionProgram      @relation(fields: [nutritionProgramId], references: [id], onDelete: Cascade)
  nutritionProgramWeek   NutritionProgramWeek? @relation(fields: [nutritionProgramWeekId], references: [id], onDelete: Cascade)

  @@index([nutritionProgramId])
  @@index([mealId])
  @@index([nutritionProgramWeekId])
  @@index([nutritionProgramDayId])
}

model ProgramWeek {
  id         Int          @id @default(autoincrement())
  programId  Int
  weekNumber Int
  name       String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  days       ProgramDay[]
  program    Program      @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId])
}

model ProgramDay {
  id              Int               @id @default(autoincrement())
  weekId          Int
  dayNumber       Int
  name            String?
  dayType         String            @default("workout")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  week            ProgramWeek       @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises       ProgramExercise[]
  workoutSessions WorkoutSession[]

  @@index([weekId])
}

model ProgramExercise {
  id                  Int                  @id @default(autoincrement())
  dayId               Int
  exerciseId          Int
  order               Int
  sets                Json?
  duration            Int?
  notes               String?
  groupId             String?
  groupType           String?
  videoUrl            String?
  dropset             Boolean              @default(false)
  singleLeg           Boolean              @default(false)
  failure             Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  exerciseCompletions ExerciseCompletion[]
  day                 ProgramDay           @relation(fields: [dayId], references: [id], onDelete: Cascade)
  exercise            Exercise             @relation(fields: [exerciseId], references: [id])

  @@index([dayId])
  @@index([exerciseId])
}

model SupportRequest {
  id        Int        @id @default(autoincrement())
  trainerId Int
  subject   String
  message   String
  status    String     @default("pending")
  priority  String     @default("medium")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  trainer   Registered @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model FinancialRecord {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  type          String
  source        String
  category      String?
  clientId      Int?
  date          DateTime
  amount        Float
  paymentMethod String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  client        TrainerClient? @relation(fields: [clientId], references: [id])
  trainer       Registered     @relation(fields: [trainerId], references: [id])

  @@index([trainerId, date, type])
  @@index([trainerId, type])
}

model TeamMember {
  id                Int                    @id @default(autoincrement())
  trainerId         Int
  fullName          String
  email             String                 @unique
  phone             String?
  role              String
  password          String
  status            String                 @default("active")
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  clientAssignments ClientTeamAssignment[]
  leadsOwned        Lead[]
  leadActivities    LeadActivity[]
  assignedTasks     Task[]
  taskComments      TaskComment[]
  trainer           Registered             @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model ClientTeamAssignment {
  id           Int           @id @default(autoincrement())
  trainerId    Int
  clientId     Int
  teamMemberId Int
  assignedAt   DateTime      @default(now())
  client       TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  teamMember   TeamMember    @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  trainer      Registered    @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@unique([clientId, teamMemberId])
  @@index([trainerId])
  @@index([clientId])
  @@index([teamMemberId])
}

model ClientProgramAssignment {
  id              Int              @id @default(autoincrement())
  trainerId       Int
  clientId        Int
  programId       Int
  assignedAt      DateTime         @default(now())
  startDate       DateTime
  endDate         DateTime?
  nextUpdateDate  DateTime?
  isActive        Boolean          @default(true)
  status          String           @default("active")
  notes           String?
  client          TrainerClient    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  program         Program          @relation(fields: [programId], references: [id], onDelete: Cascade)
  trainer         Registered       @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  workoutSessions WorkoutSession[]

  @@index([trainerId])
  @@index([clientId])
  @@index([programId])
}

model ClientNutritionAssignment {
  id                 Int              @id @default(autoincrement())
  trainerId          Int
  clientId           Int
  nutritionProgramId Int
  assignedAt         DateTime         @default(now())
  startDate          DateTime
  endDate            DateTime?
  nextUpdateDate     DateTime?
  isActive           Boolean          @default(true)
  status             String           @default("active")
  notes              String?
  client             TrainerClient    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  nutritionProgram   NutritionProgram @relation(fields: [nutritionProgramId], references: [id], onDelete: Cascade)
  trainer            Registered       @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([clientId])
  @@index([nutritionProgramId])
}

model Task {
  id                 Int            @id @default(autoincrement())
  trainerId          Int
  title              String
  description        String?
  taskType           String
  category           String
  status             String         @default("open")
  assignedTo         Int?
  dueDate            DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  clientId           Int?
  leadId             Int?
  assignedTeamMember TeamMember?    @relation(fields: [assignedTo], references: [id])
  client             TrainerClient? @relation(fields: [clientId], references: [id])
  lead               Lead?          @relation(fields: [leadId], references: [id])
  trainer            Registered     @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  comments           TaskComment[]

  @@index([trainerId])
  @@index([assignedTo])
  @@index([clientId])
  @@index([leadId])
  @@index([status])
  @@index([taskType])
  @@index([category])
}

model TaskComment {
  id           Int        @id @default(autoincrement())
  taskId       Int
  teamMemberId Int
  comment      String
  createdAt    DateTime   @default(now())
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])

  @@index([taskId])
  @@index([teamMemberId])
}

model ManuallyDeletedTask {
  id             Int      @id @default(autoincrement())
  trainerId      Int
  clientId       Int?
  category       String
  taskType       String
  originalTaskId Int
  deletedAt      DateTime @default(now())

  @@index([trainerId])
  @@index([clientId])
  @@index([trainerId, clientId, category, taskType])
}

model ClientAuth {
  id                    Int           @id @default(autoincrement())
  clientId              Int           @unique
  email                 String?       @unique
  phone                 String?       @unique
  passwordHash          String
  requiresPasswordReset Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  client                TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([phone])
}

model WorkoutSession {
  id                  Int                     @id @default(autoincrement())
  clientId            Int
  assignmentId        Int
  dayId               Int
  startedAt           DateTime                @default(now())
  pausedAt            DateTime?
  resumedAt           DateTime?
  completedAt         DateTime?
  status              String                  @default("active")
  totalDuration       Int?
  notes               String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  exerciseCompletions ExerciseCompletion[]
  assignment          ClientProgramAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  client              TrainerClient           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  day                 ProgramDay              @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([assignmentId])
  @@index([dayId])
  @@index([status])
}

model ExerciseCompletion {
  id            Int             @id @default(autoincrement())
  sessionId     Int
  exerciseId    Int
  completedAt   DateTime        @default(now())
  setsCompleted Int             @default(0)
  repsCompleted Int?
  weightUsed    Float?
  notes         String?
  duration      Int?
  exercise      ProgramExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  session       WorkoutSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([exerciseId])
}

model Notification {
  id         Int                     @id @default(autoincrement())
  trainerId  Int
  title      String
  message    String
  type       String                  @default("general")
  sentAt     DateTime                @default(now())
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  trainer    Registered              @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  recipients NotificationRecipient[]

  @@index([trainerId])
  @@index([sentAt])
}

model NotificationRecipient {
  id             Int           @id @default(autoincrement())
  notificationId Int
  clientId       Int
  status         String        @default("sent")
  deliveredAt    DateTime?
  readAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  client         TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  notification   Notification  @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([clientId])
  @@index([status])
}

model PushToken {
  id        Int           @id @default(autoincrement())
  clientId  Int           @unique
  token     String        @unique
  platform  String
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  client    TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([token])
}

model Message {
  id             Int           @id @default(autoincrement())
  trainerId      Int
  clientId       Int
  senderType     String
  content        String
  attachmentUrl  String?
  attachmentType String?
  attachmentName String?
  isRead         Boolean       @default(false)
  readAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  client         TrainerClient @relation("ClientMessages", fields: [clientId], references: [id], onDelete: Cascade)
  trainer        Registered    @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([clientId])
  @@index([createdAt])
  @@index([isRead])
  @@index([trainerId, clientId])
}

model Workflow {
  id          Int                 @id @default(autoincrement())
  trainerId   Int
  packageId   Int?
  name        String
  description String?
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  package     Package?            @relation(fields: [packageId], references: [id])
  trainer     Registered          @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  executions  WorkflowExecution[]
  steps       WorkflowStep[]

  @@index([trainerId])
  @@index([packageId])
  @@index([isActive])
}

model WorkflowStep {
  id         Int                 @id @default(autoincrement())
  workflowId Int
  stepType   String
  stepOrder  Int
  config     String
  createdAt  DateTime            @default(now())
  executions WorkflowExecution[]
  workflow   Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([stepOrder])
}

model WorkflowExecution {
  id            Int            @id @default(autoincrement())
  workflowId    Int
  clientId      Int
  currentStepId Int?
  status        String
  startedAt     DateTime       @default(now())
  completedAt   DateTime?
  lastStepAt    DateTime?
  data          String?
  assignedForms AssignedForm[]
  client        TrainerClient  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  currentStep   WorkflowStep?  @relation(fields: [currentStepId], references: [id])
  workflow      Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([clientId])
  @@index([status])
}

model AssignedForm {
  id                  Int                @id @default(autoincrement())
  workflowExecutionId Int?
  formId              Int
  clientId            Int
  assignedAt          DateTime           @default(now())
  completedAt         DateTime?
  message             String?
  client              TrainerClient      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  form                CheckInForm        @relation(fields: [formId], references: [id], onDelete: Cascade)
  workflowExecution   WorkflowExecution? @relation(fields: [workflowExecutionId], references: [id])

  @@index([formId])
  @@index([clientId])
  @@index([workflowExecutionId])
}
