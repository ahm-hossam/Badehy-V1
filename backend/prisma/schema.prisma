
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registered {
  id             Int             @id @default(autoincrement())
  fullName       String
  email          String          @unique
  countryCode    String
  countryName    String
  passwordHash   String
  createdAt      DateTime        @default(now())
  phoneNumber    String
  updatedAt      DateTime        @updatedAt
  // Account approval status: 'pending' | 'approved' | 'rejected'
  accountStatus  String          @default("pending")
  // Subscription/account status for trainer: 'active', 'expired', 'suspended'
  subscriptionStatus String      @default("active")
  packages       Package[]
  trainerClients TrainerClient[]
  labels         Label[]
  checkIns       CheckIn[]
  checkInForms   CheckInForm[]
  exercises      Exercise[]
  programs       Program[]
  nutritionPrograms NutritionProgram[]
  brandingSettings BrandingSettings[]
  pdfTemplates   PDFTemplate[]
  supportRequests SupportRequest[]
  teamMembers    TeamMember[]
  clientAssignments ClientTeamAssignment[]
  clientProgramAssignments ClientProgramAssignment[]
  clientNutritionAssignments ClientNutritionAssignment[]
  tasks          Task[]
  services       Service[]
  clientServices ClientService[]
  leads          Lead[]
  financialRecords FinancialRecord[]
}

model TrainerClient {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  fullName      String
  phone         String
  email         String
  gender        String?
  age           Int?
  source        String?
  level         String?
  registrationDate DateTime?
  injuriesHealthNotes String[]
  goals         String[] // New field for client goals
  // --- Added fields for full profile support ---
  goal                     String?
  workoutPlace             String?
  height                   Int?
  weight                   Int?
  preferredTrainingDays    String?
  preferredTrainingTime    String?
  equipmentAvailability    String?
  favoriteTrainingStyle    String?
  weakAreas                String?
  nutritionGoal            String?
  dietPreference           String?
  mealCount                Int?
  foodAllergies            String?
  dislikedIngredients      String?
  currentNutritionPlan     String?
  selectedFormId           Int?
  // --- End added fields ---
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  trainer       Registered     @relation(fields: [trainerId], references: [id])
  labels        Label[]        @relation("ClientLabels")
  notes         Note[]
  submissions   CheckInSubmission[]
  selectedForm  CheckInForm?   @relation("ClientSelectedForm", fields: [selectedFormId], references: [id])
  teamAssignments ClientTeamAssignment[]
  programAssignments ClientProgramAssignment[]
  nutritionAssignments ClientNutritionAssignment[]
  tasks          Task[]
  services       ClientService[]
  originLeadId   Int?          @unique
  originLead     Lead?         @relation("LeadToClient", fields: [originLeadId], references: [id])
  financialRecords FinancialRecord[]

  @@index([trainerId])
}

model Package {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  name          String
  durationValue Int            @default(1)
  durationUnit  String         @default("month")
  priceBeforeDisc Float        @default(0)
  discountApplied Boolean       @default(false)
  discountType    String?
  discountValue   Float?
  priceAfterDisc  Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  trainer       Registered     @relation(fields: [trainerId], references: [id])
  subscriptions Subscription[]

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Subscription {
  id              Int           @id @default(autoincrement())
  clientId        Int
  packageId       Int
  startDate       DateTime
  durationValue   Int
  durationUnit    String
  endDate         DateTime
  paymentStatus   String
  paymentMethod   String?
  priceBeforeDisc Float?
  discountApplied Boolean?
  discountType    String?
  discountValue   Float?
  priceAfterDisc  Float?
  // Hold subscription fields
  isOnHold        Boolean       @default(false)
  holdStartDate   DateTime?
  holdEndDate     DateTime?
  holdDuration    Int?
  holdDurationUnit String?
  // Cancel subscription fields
  isCanceled      Boolean       @default(false)
  canceledAt      DateTime?
  cancelReason    String?
  refundAmount    Decimal?      @db.Decimal(10,2)
  refundType      String?       // "none", "partial", "full"
  // Renewal fields
  renewalHistory  Json?         // Array of renewal records
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  installments    Installment[]
  client          TrainerClient @relation(fields: [clientId], references: [id])
  package         Package       @relation(fields: [packageId], references: [id])
  subscriptionTransactionImages SubscriptionTransactionImage[]
  holdHistory     SubscriptionHold[]

  @@index([clientId])
  @@index([packageId])
}

model Installment {
  id                Int                @id @default(autoincrement())
  subscriptionId    Int
  paidDate          DateTime
  amount            Float
  remaining         Float
  nextInstallment   DateTime?
  status            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subscription      Subscription       @relation(fields: [subscriptionId], references: [id])
  transactionImages TransactionImage[]

  @@index([subscriptionId])
}

model TransactionImage {
  id            Int         @id @default(autoincrement())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  imageData     Bytes
  uploadedAt    DateTime    @default(now())
  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])

  @@index([installmentId])
}

model SubscriptionTransactionImage {
  id             Int           @id @default(autoincrement())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  imageData      Bytes
  uploadedAt     DateTime      @default(now())
  subscriptionId Int
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model SubscriptionHold {
  id              Int           @id @default(autoincrement())
  subscriptionId  Int
  holdStartDate   DateTime
  holdEndDate     DateTime
  holdDuration    Int
  holdDurationUnit String
  reason          String?
  createdAt       DateTime      @default(now())
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

// Additional Services (one-off or ongoing) that trainers can sell to clients
model Service {
  id          Int        @id @default(autoincrement())
  trainerId   Int
  name        String
  description String?
  priceEGP    Decimal    @db.Decimal(10, 2)
  status      String     @default("active") // active | inactive
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  trainer     Registered @relation(fields: [trainerId], references: [id])
  assignments ClientService[]

  @@index([trainerId, status])
  @@index([trainerId, name])
}

model ClientService {
  id            Int           @id @default(autoincrement())
  trainerId     Int
  clientId      Int
  serviceId     Int

  // Snapshot fields to preserve history even if the service changes later
  serviceName   String
  priceEGP      Decimal       @db.Decimal(10, 2)

  // Optional scheduling to support ongoing services
  assignedAt    DateTime      @default(now())
  startDate     DateTime?
  endDate       DateTime?
  notes         String?

  // Lifecycle
  isActive      Boolean       @default(true)
  unassignedAt  DateTime?

  // Simple payment tracking for reporting
  paymentStatus String        @default("pending") // pending | paid | refunded | canceled
  paymentMethod String?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  trainer       Registered    @relation(fields: [trainerId], references: [id])
  client        TrainerClient @relation(fields: [clientId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])

  @@unique([clientId, serviceId, isActive])
  @@index([trainerId, clientId, isActive, paymentStatus])
  @@index([serviceId, isActive])
}

// Leads (CRM) models
model Lead {
  id                 Int            @id @default(autoincrement())
  trainerId          Int
  fullName           String
  phone              String?
  email              String?
  source             String?
  campaign           String?
  stage              String         @default("New") // New, Contacted, Qualified, Trial, Won, Lost
  ownerId            Int?
  score              Int?
  lastContactAt      DateTime?
  nextFollowUpAt     DateTime?
  notes              String?
  convertedClientId  Int?          @unique
  isArchived         Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  trainer            Registered     @relation(fields: [trainerId], references: [id])
  owner              TeamMember?    @relation(fields: [ownerId], references: [id])
  convertedClient    TrainerClient? @relation("LeadToClient")
  activities         LeadActivity[]
  tasks              Task[]

  @@index([trainerId, stage, isArchived])
}

model LeadActivity {
  id             Int         @id @default(autoincrement())
  leadId         Int
  type           String      // call, message, note, stage_change
  content        String?
  byTeamMemberId Int?
  createdAt      DateTime    @default(now())

  lead           Lead        @relation(fields: [leadId], references: [id])
  byTeamMember   TeamMember? @relation(fields: [byTeamMemberId], references: [id])

  @@index([leadId])
}

model Label {
  id         Int            @id @default(autoincrement())
  name       String
  trainerId  Int
  trainer    Registered     @relation(fields: [trainerId], references: [id])
  clients    TrainerClient[] @relation("ClientLabels")

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Note {
  id        Int           @id @default(autoincrement())
  clientId  Int
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  client    TrainerClient @relation(fields: [clientId], references: [id])
  
  @@index([clientId])
}

model CheckIn {
  id        Int        @id @default(autoincrement())
  trainerId Int
  name      String
  createdAt DateTime   @default(now())
  trainer   Registered @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model CheckInForm {
  id          Int                @id @default(autoincrement())
  trainerId   Int
  name        String
  published   Boolean            @default(false)
  isMainForm  Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  trainer     Registered         @relation(fields: [trainerId], references: [id])
  questions   CheckInQuestion[]
  submissions CheckInSubmission[]
  history     CheckInFormHistory[]
  selectedByClients TrainerClient[] @relation("ClientSelectedForm")
}

model CheckInQuestion {
  id            Int          @id @default(autoincrement())
  formId        Int
  order         Int          // for sorting
  label         String
  type          String       // 'short', 'long', 'single', 'multi', 'file', 'date', 'time'
  required      Boolean
  options       Json?        // for single/multi choice
  conditionGroup Json?       // for conditional logic (array of conditions)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  form          CheckInForm  @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([order])
}

model CheckInSubmission {
  id         Int           @id @default(autoincrement())
  formId     Int
  clientId   Int?
  phoneNumber String?      // for client identification
  submittedAt DateTime     @default(now())
  answers    Json          // stores all answers as JSON
  form       CheckInForm   @relation(fields: [formId], references: [id])
  client     TrainerClient? @relation(fields: [clientId], references: [id])

  @@index([formId])
  @@index([clientId])
  @@index([phoneNumber])
}

model CheckInFormHistory {
  id        Int           @id @default(autoincrement())
  formId    Int
  version   Int
  data      Json
  createdAt DateTime      @default(now())
  form      CheckInForm   @relation(fields: [formId], references: [id])

  @@index([formId])
}

// Workout Program Models
model Exercise {
  id          Int      @id @default(autoincrement())
  trainerId   Int
  name        String
  videoUrl    String?
  description String?
  category    String?
  // Additional fields from ExerciseDB
  bodyPart    String?
  equipment   String?
  target      String?
  secondaryMuscles String[] @default([])
  instructions String[] @default([])
  gifUrl      String?
  source      String?  // 'ExerciseDB' or null for custom exercises
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     Registered @relation(fields: [trainerId], references: [id])
  programExercises ProgramExercise[]

  @@index([trainerId])
}

model Program {
  id          Int      @id @default(autoincrement())
  trainerId   Int
  name        String
  description String?
  template    String?  // PDF template URL or design template
  branding    Json?    // Branding settings (colors, logo, etc.)
  pdfUrl      String?  // Generated PDF URL
  // New fields for imported programs
  isImported  Boolean  @default(false)
  importedPdfUrl String? // URL to the uploaded PDF file
  programDuration Int? // Duration in days/weeks/months
  durationUnit String? // "days", "weeks", "months"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     Registered @relation(fields: [trainerId], references: [id])
  weeks       ProgramWeek[]
  clientAssignments ClientProgramAssignment[]

  @@index([trainerId])
}

// Nutrition Program Models
model NutritionProgram {
  id          Int      @id @default(autoincrement())
  trainerId   Int
  name        String
  description String?
  template    String?  // PDF template URL or design template
  branding    Json?    // Branding settings (colors, logo, etc.)
  pdfUrl      String?  // Generated PDF URL
  // New fields for imported programs
  isImported  Boolean  @default(false)
  importedPdfUrl String? // URL to the uploaded PDF file
  programDuration Int? // Duration in days/weeks/months
  durationUnit String? // "days", "weeks", "months"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     Registered @relation(fields: [trainerId], references: [id])
  clientAssignments ClientNutritionAssignment[]

  @@index([trainerId])
}

model ProgramWeek {
  id        Int      @id @default(autoincrement())
  programId Int
  weekNumber Int
  name      String?  // e.g., "Week 1", "Strength Week"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  days      ProgramDay[]

  @@index([programId])
}

model ProgramDay {
  id         Int      @id @default(autoincrement())
  weekId     Int
  dayNumber  Int
  name       String?  // e.g., "Day 1", "Push Day"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  week       ProgramWeek @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises  ProgramExercise[]

  @@index([weekId])
}

model ProgramExercise {
  id         Int      @id @default(autoincrement())
  dayId      Int
  exerciseId Int
  order      Int      // Order within the day
  sets       Int?
  reps       Int?
  weight     Float?
  duration   Int?     // Duration in seconds
  restTime   Int?     // Rest time in seconds
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  day        ProgramDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  @@index([dayId])
  @@index([exerciseId])
}

model BrandingSettings {
  id            Int       @id @default(autoincrement())
  trainerId     Int
  companyName   String
  logoUrl       String?
  contactEmail  String
  contactPhone  String
  website       String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  trainer       Registered @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@unique([trainerId])
  @@index([trainerId])
}

model PDFTemplate {
  id            Int       @id @default(autoincrement())
  trainerId     Int
  name          String
  description   String?
  fileUrl       String?   // For complete template uploads
  category      String    @default("general")
  isActive      Boolean   @default(true)
  uploadType    String    @default("complete") // "complete" or "page-by-page"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  trainer       Registered @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  pages         PDFTemplatePage[]

  @@index([trainerId])
}

model PDFTemplatePage {
  id            Int       @id @default(autoincrement())
  templateId    Int
  pageName      String    // Custom page name (e.g., "Intro", "Program", "Nutrition", "Outro")
  pageOrder     Int       // Order of pages in the template
  fileUrl       String    // PDF file for this specific page
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  template      PDFTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([pageOrder])
}

model SupportRequest {
  id          Int      @id @default(autoincrement())
  trainerId   Int
  subject     String
  message     String
  status      String   @default("pending") // pending, in_progress, resolved
  priority    String   @default("medium") // low, medium, high
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     Registered @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

// Unified Financial Records for Income and Expenses
model FinancialRecord {
  id            Int       @id @default(autoincrement())
  trainerId     Int
  type          String    // "income" | "expense"
  source        String    // Subscription | Service | Installment | Manual | Expense
  category      String?   // For expenses: Ads, Salaries, Rent, Tools, Misc
  clientId      Int?
  date          DateTime
  amount        Decimal   @db.Decimal(12,2)
  paymentMethod String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  trainer       Registered @relation(fields: [trainerId], references: [id])
  client        TrainerClient? @relation(fields: [clientId], references: [id])

  @@index([trainerId, date, type])
  @@index([trainerId, type])
}

model TeamMember {
  id          Int      @id @default(autoincrement())
  trainerId   Int      // Owner's trainer ID
  fullName    String
  email       String   @unique
  phone       String?
  role        String   // Coach, Customer Support, Following Up, System Admin, Owner
  password    String
  status      String   @default("active") // active/inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     Registered @relation(fields: [trainerId], references: [id])
  clientAssignments ClientTeamAssignment[]
  assignedTasks   Task[]
  taskComments    TaskComment[]
  leadsOwned      Lead[]
  leadActivities  LeadActivity[]

  @@index([trainerId])
}

model ClientTeamAssignment {
  id            Int         @id @default(autoincrement())
  trainerId     Int
  clientId      Int
  teamMemberId  Int
  assignedAt    DateTime    @default(now())
  trainer       Registered  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  client        TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  teamMember    TeamMember  @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  @@unique([clientId, teamMemberId])
  @@index([trainerId])
  @@index([clientId])
  @@index([teamMemberId])
}

model ClientProgramAssignment {
  id            Int         @id @default(autoincrement())
  trainerId     Int
  clientId      Int
  programId     Int
  assignedAt    DateTime    @default(now())
  startDate     DateTime
  endDate       DateTime?
  nextUpdateDate DateTime?
  isActive      Boolean     @default(true)
  status        String      @default("active") // "active", "completed", "paused"
  notes         String?
  trainer       Registered  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  client        TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  program       Program     @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([clientId])
  @@index([programId])
}

model ClientNutritionAssignment {
  id            Int         @id @default(autoincrement())
  trainerId     Int
  clientId      Int
  nutritionProgramId Int
  assignedAt    DateTime    @default(now())
  startDate     DateTime
  endDate       DateTime?
  nextUpdateDate DateTime?
  isActive      Boolean     @default(true)
  status        String      @default("active") // "active", "completed", "paused"
  notes         String?
  trainer       Registered  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  client        TrainerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  nutritionProgram NutritionProgram @relation(fields: [nutritionProgramId], references: [id], onDelete: Cascade)

  @@index([trainerId])
  @@index([clientId])
  @@index([nutritionProgramId])
}

model Task {
  id            Int           @id @default(autoincrement())
  trainerId     Int
  title         String
  description   String?
  taskType      String        // "manual" or "automatic"
  category      String        // "Payment", "Subscription", "Profile", "Manual", "Workout", "Nutrition"
  status        String        @default("open") // "open", "done", "delayed"
  assignedTo    Int?          // TeamMember ID
  dueDate       DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // For automatic tasks - reference to the client that triggered the task
  clientId      Int?
  // Optional link to a Lead for lead-related tasks
  leadId        Int?
  
  // Relations
  trainer       Registered    @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  assignedTeamMember TeamMember? @relation(fields: [assignedTo], references: [id], onDelete: SetNull)
  client        TrainerClient? @relation(fields: [clientId], references: [id], onDelete: SetNull)
  lead          Lead?         @relation(fields: [leadId], references: [id], onDelete: SetNull)
  comments      TaskComment[]

  @@index([trainerId])
  @@index([assignedTo])
  @@index([clientId])
  @@index([leadId])
  @@index([status])
  @@index([taskType])
  @@index([category])
}

model TaskComment {
  id          Int      @id @default(autoincrement())
  taskId      Int
  teamMemberId Int
  comment     String
  createdAt   DateTime @default(now())
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  teamMember  TeamMember @relation(fields: [teamMemberId], references: [id])

  @@index([taskId])
  @@index([teamMemberId])
}

model ManuallyDeletedTask {
  id            Int      @id @default(autoincrement())
  trainerId     Int
  clientId      Int?
  category      String
  taskType      String
  originalTaskId Int
  deletedAt     DateTime @default(now())

  @@index([trainerId])
  @@index([clientId])
  @@index([trainerId, clientId, category, taskType])
}