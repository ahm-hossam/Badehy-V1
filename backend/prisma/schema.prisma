
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registered {
  id             Int             @id @default(autoincrement())
  fullName       String
  email          String          @unique
  countryCode    String
  countryName    String
  passwordHash   String
  createdAt      DateTime        @default(now())
  phoneNumber    String
  updatedAt      DateTime        @updatedAt
  packages       Package[]
  trainerClients TrainerClient[]
  labels         Label[]
  checkIns       CheckIn[]
  checkInForms   CheckInForm[]
  exercises      Exercise[]
  programs       Program[]
  brandingSettings BrandingSettings[]
  pdfTemplates   PDFTemplate[]
}

model TrainerClient {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  fullName      String
  phone         String
  email         String
  gender        String?
  age           Int?
  source        String?
  level         String?
  registrationDate DateTime?
  injuriesHealthNotes String[]
  goals         String[] // New field for client goals
  // --- Added fields for full profile support ---
  goal                     String?
  workoutPlace             String?
  height                   Int?
  weight                   Int?
  preferredTrainingDays    String?
  preferredTrainingTime    String?
  equipmentAvailability    String?
  favoriteTrainingStyle    String?
  weakAreas                String?
  nutritionGoal            String?
  dietPreference           String?
  mealCount                Int?
  foodAllergies            String?
  dislikedIngredients      String?
  currentNutritionPlan     String?
  selectedFormId           Int?
  // --- End added fields ---
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  trainer       Registered     @relation(fields: [trainerId], references: [id])
  labels        Label[]        @relation("ClientLabels")
  notes         Note[]
  submissions   CheckInSubmission[]
  selectedForm  CheckInForm?   @relation("ClientSelectedForm", fields: [selectedFormId], references: [id])

  @@index([trainerId])
}

model Package {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  trainer       Registered     @relation(fields: [trainerId], references: [id])
  subscriptions Subscription[]

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Subscription {
  id              Int           @id @default(autoincrement())
  clientId        Int
  packageId       Int
  startDate       DateTime
  durationValue   Int
  durationUnit    String
  endDate         DateTime
  paymentStatus   String
  paymentMethod   String?
  priceBeforeDisc Float?
  discountApplied Boolean?
  discountType    String?
  discountValue   Float?
  priceAfterDisc  Float?
  // Hold subscription fields
  isOnHold        Boolean       @default(false)
  holdStartDate   DateTime?
  holdEndDate     DateTime?
  holdDuration    Int?
  holdDurationUnit String?
  // Cancel subscription fields
  isCanceled      Boolean       @default(false)
  canceledAt      DateTime?
  cancelReason    String?
  refundAmount    Decimal?      @db.Decimal(10,2)
  refundType      String?       // "none", "partial", "full"
  // Renewal fields
  renewalHistory  Json?         // Array of renewal records
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  installments    Installment[]
  client          TrainerClient @relation(fields: [clientId], references: [id])
  package         Package       @relation(fields: [packageId], references: [id])
  subscriptionTransactionImages SubscriptionTransactionImage[]
  holdHistory     SubscriptionHold[]

  @@index([clientId])
  @@index([packageId])
}

model Installment {
  id                Int                @id @default(autoincrement())
  subscriptionId    Int
  paidDate          DateTime
  amount            Float
  remaining         Float
  nextInstallment   DateTime?
  status            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subscription      Subscription       @relation(fields: [subscriptionId], references: [id])
  transactionImages TransactionImage[]

  @@index([subscriptionId])
}

model TransactionImage {
  id            Int         @id @default(autoincrement())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  imageData     Bytes
  uploadedAt    DateTime    @default(now())
  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])

  @@index([installmentId])
}

model SubscriptionTransactionImage {
  id             Int           @id @default(autoincrement())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  imageData      Bytes
  uploadedAt     DateTime      @default(now())
  subscriptionId Int
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model SubscriptionHold {
  id              Int           @id @default(autoincrement())
  subscriptionId  Int
  holdStartDate   DateTime
  holdEndDate     DateTime
  holdDuration    Int
  holdDurationUnit String
  reason          String?
  createdAt       DateTime      @default(now())
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}

model Label {
  id         Int            @id @default(autoincrement())
  name       String
  trainerId  Int
  trainer    Registered     @relation(fields: [trainerId], references: [id])
  clients    TrainerClient[] @relation("ClientLabels")

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Note {
  id        Int           @id @default(autoincrement())
  clientId  Int
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  client    TrainerClient @relation(fields: [clientId], references: [id])
  
  @@index([clientId])
}

model CheckIn {
  id        Int        @id @default(autoincrement())
  trainerId Int
  name      String
  createdAt DateTime   @default(now())
  trainer   Registered @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model CheckInForm {
  id          Int                @id @default(autoincrement())
  trainerId   Int
  name        String
  published   Boolean            @default(false)
  isMainForm  Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  trainer     Registered         @relation(fields: [trainerId], references: [id])
  questions   CheckInQuestion[]
  submissions CheckInSubmission[]
  history     CheckInFormHistory[]
  selectedByClients TrainerClient[] @relation("ClientSelectedForm")
}

model CheckInQuestion {
  id            Int          @id @default(autoincrement())
  formId        Int
  order         Int          // for sorting
  label         String
  type          String       // 'short', 'long', 'single', 'multi', 'file', 'date', 'time'
  required      Boolean
  options       Json?        // for single/multi choice
  conditionGroup Json?       // for conditional logic (array of conditions)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  form          CheckInForm  @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([order])
}

model CheckInSubmission {
  id         Int           @id @default(autoincrement())
  formId     Int
  clientId   Int?
  phoneNumber String?      // for client identification
  submittedAt DateTime     @default(now())
  answers    Json          // stores all answers as JSON
  form       CheckInForm   @relation(fields: [formId], references: [id])
  client     TrainerClient? @relation(fields: [clientId], references: [id])

  @@index([formId])
  @@index([clientId])
  @@index([phoneNumber])
}

model CheckInFormHistory {
  id        Int           @id @default(autoincrement())
  formId    Int
  version   Int
  data      Json
  createdAt DateTime      @default(now())
  form      CheckInForm   @relation(fields: [formId], references: [id])

  @@index([formId])
}

// Workout Program Models
model Exercise {
  id          Int      @id @default(autoincrement())
  trainerId   Int
  name        String
  videoUrl    String?
  description String?
  category    String?
  // Additional fields from ExerciseDB
  bodyPart    String?
  equipment   String?
  target      String?
  secondaryMuscles String[] @default([])
  instructions String[] @default([])
  gifUrl      String?
  source      String?  // 'ExerciseDB' or null for custom exercises
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     Registered @relation(fields: [trainerId], references: [id])
  programExercises ProgramExercise[]

  @@index([trainerId])
}

model Program {
  id          Int      @id @default(autoincrement())
  trainerId   Int
  name        String
  description String?
  template    String?  // PDF template URL or design template
  branding    Json?    // Branding settings (colors, logo, etc.)
  pdfUrl      String?  // Generated PDF URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     Registered @relation(fields: [trainerId], references: [id])
  weeks       ProgramWeek[]

  @@index([trainerId])
}

model ProgramWeek {
  id        Int      @id @default(autoincrement())
  programId Int
  weekNumber Int
  name      String?  // e.g., "Week 1", "Strength Week"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  program   Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  days      ProgramDay[]

  @@index([programId])
}

model ProgramDay {
  id         Int      @id @default(autoincrement())
  weekId     Int
  dayNumber  Int
  name       String?  // e.g., "Day 1", "Push Day"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  week       ProgramWeek @relation(fields: [weekId], references: [id], onDelete: Cascade)
  exercises  ProgramExercise[]

  @@index([weekId])
}

model ProgramExercise {
  id         Int      @id @default(autoincrement())
  dayId      Int
  exerciseId Int
  order      Int      // Order within the day
  sets       Int?
  reps       Int?
  weight     Float?
  duration   Int?     // Duration in seconds
  restTime   Int?     // Rest time in seconds
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  day        ProgramDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  @@index([dayId])
  @@index([exerciseId])
}

model BrandingSettings {
  id            Int       @id @default(autoincrement())
  trainerId     Int
  companyName   String
  logoUrl       String?
  contactEmail  String
  contactPhone  String
  website       String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  trainer       Registered @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@unique([trainerId])
  @@index([trainerId])
}

model PDFTemplate {
  id            Int       @id @default(autoincrement())
  trainerId     Int
  name          String
  description   String?
  fileUrl       String?   // For complete template uploads
  category      String    @default("general")
  isActive      Boolean   @default(true)
  uploadType    String    @default("complete") // "complete" or "page-by-page"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  trainer       Registered @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  pages         PDFTemplatePage[]

  @@index([trainerId])
}

model PDFTemplatePage {
  id            Int       @id @default(autoincrement())
  templateId    Int
  pageName      String    // Custom page name (e.g., "Intro", "Program", "Nutrition", "Outro")
  pageOrder     Int       // Order of pages in the template
  fileUrl       String    // PDF file for this specific page
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  template      PDFTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([pageOrder])
}

model SupportRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("NEW") // NEW, IN_PROGRESS, RESOLVED, CLOSED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}