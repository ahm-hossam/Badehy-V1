
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Registered {
  id             Int             @id @default(autoincrement())
  fullName       String
  email          String          @unique
  countryCode    String
  countryName    String
  passwordHash   String
  createdAt      DateTime        @default(now())
  phoneNumber    String
  updatedAt      DateTime        @updatedAt
  packages       Package[]
  trainerClients TrainerClient[]
}

model TrainerClient {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  fullName      String
  phone         String
  email         String
  gender        String?
  age           Int?
  source        String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  trainer       Registered     @relation(fields: [trainerId], references: [id])

  @@index([trainerId])
}

model Package {
  id            Int            @id @default(autoincrement())
  trainerId     Int
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  trainer       Registered     @relation(fields: [trainerId], references: [id])
  subscriptions Subscription[]

  @@unique([trainerId, name])
  @@index([trainerId])
}

model Subscription {
  id              Int           @id @default(autoincrement())
  clientId        Int
  packageId       Int
  startDate       DateTime
  durationValue   Int
  durationUnit    String
  endDate         DateTime
  paymentStatus   String
  paymentMethod   String?
  priceBeforeDisc Float?
  discountApplied Boolean?
  discountType    String?
  discountValue   Float?
  priceAfterDisc  Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  installments    Installment[]
  client          TrainerClient @relation(fields: [clientId], references: [id])
  package         Package       @relation(fields: [packageId], references: [id])
  subscriptionTransactionImages SubscriptionTransactionImage[]

  @@index([clientId])
  @@index([packageId])
}

model Installment {
  id                Int                @id @default(autoincrement())
  subscriptionId    Int
  paidDate          DateTime
  amount            Float
  remaining         Float
  nextInstallment   DateTime?
  status            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  subscription      Subscription       @relation(fields: [subscriptionId], references: [id])
  transactionImages TransactionImage[]

  @@index([subscriptionId])
}

model TransactionImage {
  id            Int         @id @default(autoincrement())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  imageData     Bytes
  uploadedAt    DateTime    @default(now())
  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])

  @@index([installmentId])
}

model SubscriptionTransactionImage {
  id             Int           @id @default(autoincrement())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  imageData      Bytes
  uploadedAt     DateTime      @default(now())
  subscriptionId Int
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])

  @@index([subscriptionId])
}